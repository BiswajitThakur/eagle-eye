use std::{
    io,
    net::{SocketAddr, TcpListener, TcpStream},
    path::PathBuf,
};

use crate::{
    Connection,
    stream::EagleEyeStreamSync,
    task::sync::ServerTaskSync,
    utils::{handle_stream_server_sync, write_log_sync},
};

pub struct EagleEyeListenerSync {
    key: [u8; 32],
    log: Option<PathBuf>,
}

impl EagleEyeListenerSync {
    pub fn new(key: [u8; 32]) -> Self {
        Self { key, log: None }
    }
    pub fn set_log_path<P: Into<PathBuf>>(mut self, path: P) -> Self {
        self.log = Some(path.into());
        self
    }
}

impl EagleEyeListenerSync {
    pub fn run<const N: usize, T: io::Read + io::Write>(
        self,
        addr: SocketAddr,
        f: fn(T) -> io::Result<()>,
    ) -> io::Result<()> {
        fn handler<const M: usize>(
            stream: EagleEyeStreamSync<M, &TcpStream, &TcpStream>,
        ) -> io::Result<()> {
            f(stream)
        }
        let listener = TcpListener::bind(addr)?;
        for stream in listener.incoming() {
            match stream {
                Ok(stream) => {
                    let e_stream = handle_stream_server_sync::<N>(self.key, &stream)?.unwrap();
                    f(e_stream)?;
                }
                Err(err) => {
                    write_log_sync(self.log.as_ref(), err);
                }
            }
        }
        Ok(())
    }
}
